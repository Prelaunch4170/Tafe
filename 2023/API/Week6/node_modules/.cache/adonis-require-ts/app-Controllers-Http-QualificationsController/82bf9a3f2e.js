"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Qualification_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Qualification"));
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class QualificationsController {
    async index({}) {
        const quals = await Qualification_1.default.all();
        return quals;
    }
    async store({ request, response }) {
        const newQualSchema = Validator_1.schema.create({
            QualCode: Validator_1.schema.string({}, [Validator_1.rules.maxLength(32)]),
            NationalQualCode: Validator_1.schema.string({}, [Validator_1.rules.maxLength(32)]),
            TafeQualCode: Validator_1.schema.string({}, [Validator_1.rules.maxLength(32)]),
            QualName: Validator_1.schema.string({}, [Validator_1.rules.maxLength(32)]),
            TotalUnits: Validator_1.schema.number(),
            CoreUnits: Validator_1.schema.number(),
            ElectedUnits: Validator_1.schema.number(),
            ReqListedElectedUnits: Validator_1.schema.number(),
        });
        try {
            const payload = await request.validate({
                schema: newQualSchema
            });
            const qual = await Qualification_1.default.create(payload);
            return response.ok(qual);
        }
        catch (error) {
            response.badRequest(error.messages);
        }
    }
    async show({ params, response }) {
        const qual = await Qualification_1.default.find(params.id);
        return response.ok(qual);
    }
    async update({}) { }
    async destroy({ params, response }) {
        const id = params.id;
        const qual = await Qualification_1.default.find(id);
        if (!qual) {
            return response.notFound({ message: 'qualification not found' });
        }
        await qual.delete();
        return response.ok({
            message: `qualification ${id + ':' + qual.QualName} was deleted`,
        });
    }
}
exports.default = QualificationsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVhbGlmaWNhdGlvbnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUXVhbGlmaWNhdGlvbnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsbUdBQW9EO0FBQ3BELDJFQUEwRDtBQUMxRCxNQUFxQix3QkFBd0I7SUFDcEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUF1QjtRQUV4QyxNQUFNLEtBQUssR0FBRyxNQUFNLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDeEMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXNCO1FBQ3pELE1BQU0sYUFBYSxHQUFHLGtCQUFNLENBQUMsTUFBTSxDQUFDO1lBQ2xDLFFBQVEsRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xELGdCQUFnQixFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUQsWUFBWSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEQsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEQsVUFBVSxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQzNCLFNBQVMsRUFBRSxrQkFBTSxDQUFDLE1BQU0sRUFBRTtZQUMxQixZQUFZLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLEVBQUU7WUFDN0IscUJBQXFCLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLEVBQUU7U0FDdEMsQ0FBQyxDQUFBO1FBQ0YsSUFBSTtZQUNILE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQztnQkFDckMsTUFBTSxFQUFFLGFBQWE7YUFDdEIsQ0FBQyxDQUFBO1lBQ0YsTUFBTSxJQUFJLEdBQWtCLE1BQU0sdUJBQWEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDL0QsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQ3hCO1FBQUEsT0FBTSxLQUFLLEVBQUM7WUFDWixRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtTQUNuQztJQUdKLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBc0I7UUFDdkQsTUFBTSxJQUFJLEdBQUcsTUFBTSx1QkFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFaEQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzFCLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQXVCLElBQUcsQ0FBQztJQUV4QyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBc0I7UUFDMUQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQTtRQUNwQixNQUFNLElBQUksR0FBRyxNQUFNLHVCQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRXpDLElBQUcsQ0FBQyxJQUFJLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUUseUJBQXlCLEVBQUMsQ0FBQyxDQUFBO1NBQy9EO1FBQ0QsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDbkIsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ2pCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxjQUFjO1NBQ2pFLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQW5ERCwyQ0FtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IFF1YWxpZmljYXRpb24gZnJvbSAnQXBwL01vZGVscy9RdWFsaWZpY2F0aW9uJ1xuaW1wb3J0IHsgc2NoZW1hLCBydWxlcyB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvVmFsaWRhdG9yJ1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVhbGlmaWNhdGlvbnNDb250cm9sbGVyIHtcbiAgcHVibGljIGFzeW5jIGluZGV4KHt9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgLy9yZXR1cm57aGVsbG86ICdBbmRyZSBzYXlzIGhlbGxvJ31cbiAgICBjb25zdCBxdWFscyA9IGF3YWl0IFF1YWxpZmljYXRpb24uYWxsKCk7XG4gICAgcmV0dXJuIHF1YWxzO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0b3JlKHtyZXF1ZXN0LCByZXNwb25zZX06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBuZXdRdWFsU2NoZW1hID0gc2NoZW1hLmNyZWF0ZSh7XG4gICAgICBRdWFsQ29kZTogc2NoZW1hLnN0cmluZyh7fSwgW3J1bGVzLm1heExlbmd0aCgzMildKSxcbiAgICAgIE5hdGlvbmFsUXVhbENvZGU6IHNjaGVtYS5zdHJpbmcoe30sIFtydWxlcy5tYXhMZW5ndGgoMzIpXSksXG4gICAgICBUYWZlUXVhbENvZGU6IHNjaGVtYS5zdHJpbmcoe30sIFtydWxlcy5tYXhMZW5ndGgoMzIpXSksXG4gICAgICBRdWFsTmFtZTogc2NoZW1hLnN0cmluZyh7fSwgW3J1bGVzLm1heExlbmd0aCgzMildKSxcbiAgICAgIFRvdGFsVW5pdHM6IHNjaGVtYS5udW1iZXIoKSxcbiAgICAgIENvcmVVbml0czogc2NoZW1hLm51bWJlcigpLFxuICAgICAgRWxlY3RlZFVuaXRzOiBzY2hlbWEubnVtYmVyKCksXG4gICAgICBSZXFMaXN0ZWRFbGVjdGVkVW5pdHM6IHNjaGVtYS5udW1iZXIoKSxcbiAgICAgfSlcbiAgICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKHtcbiAgICAgICAgc2NoZW1hOiBuZXdRdWFsU2NoZW1hXG4gICAgICB9KVxuICAgICAgY29uc3QgcXVhbDogUXVhbGlmaWNhdGlvbiA9IGF3YWl0IFF1YWxpZmljYXRpb24uY3JlYXRlKHBheWxvYWQpXG4gICAgICByZXR1cm4gcmVzcG9uc2Uub2socXVhbClcbiAgICAgfWNhdGNoKGVycm9yKXtcbiAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3QoZXJyb3IubWVzc2FnZXMpXG4gICAgIH1cbiAgICAgXG4gICAgIFxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNob3coe3BhcmFtcywgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgcXVhbCA9IGF3YWl0IFF1YWxpZmljYXRpb24uZmluZChwYXJhbXMuaWQpXG5cbiAgICByZXR1cm4gcmVzcG9uc2Uub2socXVhbClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cGRhdGUoe306IEh0dHBDb250ZXh0Q29udHJhY3QpIHt9XG5cbiAgcHVibGljIGFzeW5jIGRlc3Ryb3koe3BhcmFtcywgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgaWQgPSBwYXJhbXMuaWRcbiAgICBjb25zdCBxdWFsID0gYXdhaXQgUXVhbGlmaWNhdGlvbi5maW5kKGlkKVxuXG4gICAgaWYoIXF1YWwpe1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLm5vdEZvdW5kKHttZXNzYWdlOiAncXVhbGlmaWNhdGlvbiBub3QgZm91bmQnfSlcbiAgICB9XG4gICAgYXdhaXQgcXVhbC5kZWxldGUoKVxuICAgIHJldHVybiByZXNwb25zZS5vayh7XG4gICAgICBtZXNzYWdlOiBgcXVhbGlmaWNhdGlvbiAke2lkICsgJzonICsgcXVhbC5RdWFsTmFtZX0gd2FzIGRlbGV0ZWRgLFxuICAgIH0pXG4gIH1cbn1cbiJdfQ==